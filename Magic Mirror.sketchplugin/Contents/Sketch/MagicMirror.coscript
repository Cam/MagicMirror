@import "helper.js"
@import "LayerHelper.cocoascript"
@import "BezierPathHelper.cocoascript"
@import "ImageHelper.cocoascript"

var MagicMirror = function(context) {

    var ctx = MagicMirror.context(context)
    var ui = MagicMirror.ui(context)
    var util = MagicMirror.util
    var createFlattener = MagicMirror.flattener
    var actioner = {
        context : ctx,

        jumpToArtboard : function() {
            var context = this.context
            var run = function(selections, view, artboards, ui, util) {
                log("MagicMirror.jumpToArtboard()")
                if (util.empty(selections)) {
                    ui.dialog("Magic Mirror", "No layer selected. Please select a shape layer in order to perform the Jump To Artboard action.")
                }

                var selection = selections[0] || {}
                var lookup = util.createLookup(artboards)
                var artboard = lookup[selection.name]
                if (artboard) {
                    view.zoomToArtboard(artboard)
                }
            }

            run(context.selections() || [], context.view, context.artboards(), ui, util)
        },

        mirrorPage : function() {
            var context = this.context
            var run = function(artboards, layers, util, flattener) {
                log("MagicMirror.mirrorPage()")
                var lookup = util.createLookup(artboards)
                each(layers, function(layer) {
                    var parent = layer.artboard
                    var artboard = lookup[layer.name]
                    if (layer.mirrorable && artboard) {
                        flattener.perspectiveTransform(artboard, layer)
                    }
                })
            }
            run(context.artboards(), context.layers(), util, createFlattener())
        },


        flipHorizontally : function(context) {
            var context = this.context
            var run = function(artboards, selections, ui, util, flattener) {
                log("MagicMirror.flipHorizontally()")

                if (util.empty(selections)) {
                    ui.dialog("Magic Mirror", "No shape layers selected. Please select a shape layer to continue the Rotate Points operation.")
                    return
                }

                var lookup = util.createLookup(artboards)
                each(selections, function(selection) {
                    if (selection.pointsRotatable) {
                        selection.flipHorizontally()
                        var artboard = lookup[selection.name] 
                        if (selection.mirrorable && artboard) {
                            flattener.perspectiveTransform(artboard, selection)
                        }
                    } else {
                        util.debug("selection: " + selection.name + " not rotatable")
                    }
                })
            }

            run(context.artboards(), context.selections(), ui, util, createFlattener())
        },

        rotatePoints : function(context) {
            var context = this.context
            var run = function(artboards, selections, ui, util, flattener) {
                log("MagicMirror.rotatePoints()")

                if (util.empty(selections)) {
                    ui.dialog("Magic Mirror", "No shape layers selected. Please select a shape layer to continue the Rotate Points operation.")
                    return
                }

                var lookup = util.createLookup(artboards)
                each (selections, function(selection) {
                    if (selection.pointsRotatable) {
                        selection.rotatePoints()
                        var artboard = lookup[selection.name] 
                        if (selection.mirrorable && artboard) {
                            flattener.perspectiveTransform(artboard, selection)
                        }
                    } else {
                        util.debug("selection: " + selection.name + " not rotatable")
                    }
                })
            }

            run(context.artboards(), context.selections(), ui, util, createFlattener())
        },

        highlightMirrors: function(context) {
            var context = this.context
            var run = function(artboards, layers, util, flattener) {
                log("MagicMirror.highlightMirrors()")
                var lookup = util.createLookup(artboards)
                each(layers, function(layer) {
                    var parent = layer.artboard
                    var artboard = lookup[layer.name]
                    if (layer.mirrorable && artboard) {
                        layer.fillColor("#FFFFFF")
                    }
                })
            }
            run(context.artboards(), context.layers(), util, createFlattener())
        }
    }

    var persister = MagicMirror.persister()
    var validator = MagicMirror.validator(ui, persister)
    var locker = MagicMirror.locker(actioner, validator, persister, ui)

    return {
        "needsRevalidate" : validator.needsRevalidate,
        "validate": validator.validate,
        "isLicensed" : persister.licensed,
        "actionsCount": locker.actionsCount,
        "jumpToArtboard": locker.jumpToArtboard,
        "mirrorPage": locker.mirrorPage,
        "rotatePoints": locker.rotatePoints,
        "flipHorizontally": locker.flipHorizontally,
        "highlightMirrors": locker.highlightMirrors,
    }
}

MagicMirror.context = function(context) {

    var pri = (function(context){
        var doc = context.document;           // the current document (MSDocument)
        var page = [doc currentPage];         // the current page (MSPage)
        var artboards = [page artboards];     // all artboards
        var view = [doc currentView];
        var selections = context.selection

        return {
            doc: doc,
            page : page,
            artboards : artboards,
            view : view,
            selections : selections,
        }
    }(context));

    var view = MagicMirror.view(pri.view)
    var artboards = function() {
        return map(pri.artboards, function(artboard) {
            return MagicMirror.artboard(artboard)
        })
    }
    var selections = function() {
        var selections = map(pri.selections, function(item) {
            return MagicMirror.layer(item)
        })
        return selections 
    }
    var layers = function() {
        return map([page children], function(layer) {
            return MagicMirror.layer(layer)
        })
    }
    var page = pri.page

    var context = {}
    context.page = page
    context.view = view
    context.artboards = artboards
    context.selections = selections
    context.layers = layers
    return context
}

MagicMirror.artboard = function(msartboard) {
    if (!msartboard) {
        return {}
    }
    return {
        name: msartboard.name(),
        rect: [msartboard rect],
        layer : msartboard,
    }
}

MagicMirror.layer = function(mslayer) {
    if (mslayer.className && mslayer.className().toString() == "MSShapeGroup") {
        var artboard = MagicMirror.artboard(mslayer.parentArtboard())
        var layerName = mslayer.name()
        return {
            artboard: artboard,
            name: layerName,
            mirrorable: true || (artboard.name != layerName),
            pointsRotatable: true,
            rotatePoints:function() {
                var bezierPath = LayerHelper.getBezierPath(mslayer)
                var rotated = BezierPathHelper.rotatePoints(bezierPath)
                mslayer.setBezierPath(rotated)
                log("rotate: " + this.name)
            },
            flipHorizontally:function() {
                var bezierPath = LayerHelper.getBezierPath(mslayer)
                var flipped = BezierPathHelper.flipShiftX(bezierPath)
                mslayer.setBezierPath(flipped)
                mslayer.isFlippedHorizontal = !mslayer.isFlippedHorizontal()
            },
            fillColor: function(hex) {
                LayerHelper.fillColor(mslayer, hex)
            },
            layer : mslayer,
        }
    } else {
        //var artboard = MagicMirror.artboard(mslayer.parentArtboard())
        return {
            //artboard: artboard,
            name: mslayer.name(),
            mirrorable: false,
            pointsRotatable: false
        }
    }
}

MagicMirror.flattener = function() {
    return {
        flattener : MSLayerFlattener.alloc().init(),
        perspectiveTransform : function(from, to) {
            var layer = to.layer
            var image = LayerHelper.getImage(from.layer, this.flattener)
            var bezierPath = LayerHelper.getBezierPathInBounds(layer)
            var quad = BezierPathHelper.getQuad(bezierPath)
            var transformed = ImageHelper.perspectiveTransform(image, quad.tl, quad.tr, quad.bl, quad.br, quad.size)
            LayerHelper.fillBottom(layer, transformed)
            log("perspectiveTransforming: from " + from.name + ", to: " + to.name)
        }
    }
}

MagicMirror.view = function(view) {
    return {
        view: view,
        zoomToArtboard:function(artboard) {
            log("jump to artboard for layer: " + artboard.name + ", frame: " + artboard.frame + ", view:" + this.view)
            this.view.zoomToFitRect(NSInsetRect(artboard.rect, -50, -50));
        }
    }
}


MagicMirror.persister = function() {
    var defaults = NSUserDefaults.standardUserDefaults()
    var allKeys = {
        "actionsCount":"design.magicmirror.actionscount",
        "lastValidation":"design.magicmirror.lastvalidation",
        "licensed":"design.magicmirror.licensed",
    }
    var actionsCount = 0
    var lastValidation = null
    var licensed = false
    reload()

    function save() {
        defaults.synchronize()
    }

    function reset() {
        log("reset")
        for (key in allKeys) {
            defaults.removeObjectForKey(allKeys[key])
        }
        save()
        reload()
    }

    function reload() {
        actionsCount = defaults.integerForKey(allKeys["actionsCount"])
        lastValidation = defaults.objectForKey(allKeys["lastValidation"])
        licensed = defaults.boolForKey(allKeys["licensed"])
        print("actionsCount: " + actionsCount)
    }

    return {
        "reset":function() {
            reset()
            this.actionsCount = actionsCount
            this.lastValidation = lastValidation
            this.licensed = licensed
        },
        "actionsCount":actionsCount,
        "setActionsCount":function(count) {
            defaults.setInteger_forKey_(count, allKeys["actionsCount"])
            save()
        },
        "lastValidation":lastValidation,
        "setLastValidation":function(date) {
            defaults.setObject_forKey_(date, allKeys["lastValidation"])
            save()
        },
        "licensed":licensed,
        "setLicensed":function(licensed) {
            defaults.setBool_forKey_(licensed, allKeys["licensed"])
            save()
        }
    }
}

MagicMirror.validator = function(ui, persister) {

    function get(urlString) {
        var theUrl = [NSURL URLWithString:urlString]
        
        // define the request
        var theRequest = NSMutableURLRequest.requestWithURL_cachePolicy_timeoutInterval(theUrl, NSURLRequestReloadIgnoringLocalCacheData, 60);
        theRequest.setHTTPMethod_("GET");
        
        // get response data
        var theResponse = null, error = null, theResponseData = [NSURLConnection sendSynchronousRequest:theRequest returningResponse:theResponse error:error];
        
        return {
            "url":theUrl,
            "response": theResponse,
            "data":theResponseData,
            "error":error,
            "json":function() {
                if (this.data) {
                    var theText = [[NSString alloc] initWithData:this.data encoding:NSUTF8StringEncoding];
                    var parsed = JSON.parse(theText);
                    return parsed
                }
                return {}
            },
        }
    }

    function promptToValidate() {
        var license = ui.input("Please enter your Paypal transaction id:", "")
        return validate(license)
    }

    function now() {
        var now = NSDate.alloc().init()
        return now
    }

    function validate(license)
    {
        var url = "http://api.magicmirror.design/verify/" + license + ".json"
        var response = get(url)
        return response.json()["success"]
    }

    function lastValidation() {
        var date = persister.lastValidation
        return date
    }

    function setLastValidation(date) {
        persister.setLastValidation(date)
    }

    function sinceLastValidation() {    
        var past = lastValidation() || NSDate.distantPast()
        var seconds = now().timeIntervalSinceDate(past)
        return seconds
    }

    function needsRevalidate() {
        var day = 24 * 60 * 60 // one day
        return sinceLastValidation() >= day
    }

    return {
        "needsRevalidate": needsRevalidate,
        "validate": function() {
            var success = promptToValidate()
            persister.setLicensed(success)
            setLastValidation(now())
            return {
                "success":success,
            }
        },
    }
};

MagicMirror.locker = function(actioner, validator, persister, ui) {
    var actionsCount = persister.actionsCount || 0
    var isLicensed = persister.licensed || false;

    function needsPromptDonation() {
        return (actionsCount % 10 == 0)
    }

    function promptDonation() {
        ui.alert("Enjoying Magic Mirror for Sketch 3?, please consider donating :)",
            [
                {
                    name:"Donate",
                    action: function() {
                        ui.open("http://magicmirror.design/#donate")
                    }
                },
                {
                    name:"Later",
                }
            ]
        )
    }

    function increaseActionsCount() {
        actionsCount++
        persister.setActionsCount(actionsCount)
    }

    function afterAction() {
        increaseActionsCount()
        log("actionsCount: " + actionsCount + " needs: " + needsPromptDonation() + " licensed: " + isLicensed)
        if (needsPromptDonation() && !isLicensed) {
            log("prompt")
            promptDonation(actionsCount)
        }
    }

    return {
        actionsCount:actionsCount,
        isLicensed:isLicensed,
        mirrorPage:function() {
            actioner.mirrorPage()
            afterAction()
        },
        jumpToArtboard:function() {
            actioner.jumpToArtboard()
            afterAction()
        },
        rotatePoints:function() {
            actioner.rotatePoints()
            afterAction()
        },
        flipHorizontally:function() {
            actioner.flipHorizontally()
            afterAction()
        },
        highlightMirrors:function() {
            actioner.highlightMirrors()
            afterAction()
        }
    }
}

MagicMirror.util = {
    empty : function(array) {
        return (array == nil || array.length == 0)
    },
    createLookup : function(identifiables) {
        var lookup = {}
        each(identifiables, function(item) {
            lookup[item.name] = item
        })
        return lookup
    },
    debug : function(text) {
        log(text)
    }
}

MagicMirror.ui = function(context) {
    return {
        alert : function(message, actions) {
          var alert = [[NSAlert alloc] init]
          [alert setMessageText:message]
          
          each(actions, function(action) {
            [alert addButtonWithTitle:action.name]
          })
          var responseCode = [alert runModal]
          var action = actions[responseCode - 1000]["action"] || function() {}
          action()
          return responseCode
        },
        dialog : function(title, message) {
            var app = [NSApplication sharedApplication];
    	    var dialog = [app displayDialog:message withTitle:title];
            return dialog
        },
        input: function(question, initialValue) {
            var doc = context.document
            return [doc askForUserInput:question initialValue:initialValue];
        },
        open: function(url) {
            [[NSWorkspace sharedWorkspace] openURL:[NSURL URLWithString:url]];
        }
    }
}
