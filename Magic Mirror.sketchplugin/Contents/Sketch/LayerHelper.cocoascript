var LayerHelper = {

	"fillBottom": function(mslayer, nsimage) {
		var fill = mslayer.style().fills().firstObject();
		if (fill == nil) {
    		fill = mslayer.style().fills().addNewStylePart();
		}
		fill.setFillType(4);
		fill.setPatternFillType(1);
		fill.setPatternImage(nsimage);
	},

	"fillColor": function(mslayer, hex) {
		var fill = mslayer.style().fills().firstObject();
		if (fill == nil) {
    		fill = mslayer.style().fills().addNewStylePart();
		}
		fill.setFillType(0);
		fill.setColor([MSColor colorWithSVGString:hex])
	},
	
	"getBezierPath": function(msshapegroup) {
		return msshapegroup.bezierPath()
	},

	"getBezierPathInBounds": function(msshapegroup) {
		return msshapegroup.bezierPathInBounds()
	},


	"rotatePoints": function(msshapegroup) {
		var shape = msshapegroup.layers().firstObject()
		var path = shape.path()
		var lastPoint = path.lastPoint()
		path.removeLastPoint()
		[path insertPoint:lastPoint atIndex:0]
	},

	"getBoundsBezierPath": function(msshapegroup) {
		var group = msshapegroup.copy()
		var shape = group.layers().firstObject()
		var path = shape.path()

		for (var i = 0; i < path.points().length(); i++) {
			var point = path.pointAtIndex(i)


			point.setCornerRadius(0)
		}

		return this.getBezierPathInBounds(group)
	},

	"getCurvePoints": function(msshapegroup) {
		var shape = msshapegroup.layers().firstObject()
		return shape.allCurvePoints()
	},

	"getImage": function(mslayer, mslayerflattener) {
		var layers = [MSLayerArray arrayWithLayer:mslayer];
		var image = [mslayerflattener imageFromLayers:layers];
		return image
	},

	"getIdentifier" : function(mslayer) {
		var name = mslayer.name()
		var array = name.match(/[^\.|@|#]+/)
		var identifier = array[0].trim()
		return identifier
	},

	"getTokens" : function(mslayer) {
		var name = mslayer.name()
		var tokens = name.split(" ")
		var keyvalues = {}

		each(tokens, function(token) {
			var items = token.split(":")
			// log(items)

			// each(items, function(item) {
			// 	log(item)
			// })
			if (count(items) > 1) {
				var key = items[0]
				var value = items[1]
				keyvalues[key] = value
			} else {
				var key = items[0]
				keyvalues[key] = true
			}
		})

		return keyvalues
	}
}
