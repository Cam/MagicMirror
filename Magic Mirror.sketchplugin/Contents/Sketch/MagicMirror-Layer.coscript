
MagicMirror.layer = function(mslayer) {
    if (mslayer.className && mslayer.className().toString() == "MSShapeGroup") {
        var artboard = MagicMirror.artboard(mslayer.parentArtboard())
        var layerName = mslayer.name()
        var identifier = LayerHelper.getIdentifier(mslayer)

        var refreshStyles = function() {
                LayerHelper.refreshFill(mslayer)
        }
        return {
            artboard: artboard,
            name: layerName,
            identifier: identifier,
            matchingArtboard:function(lookup) {
                var ab = lookup[this.identifier]
                if (ab && artboard.name != ab.name) {
                    return ab
                }
                return null
            },
            tokens: function() {
                return LayerHelper.getTokens(this.layer)
            },
            pointsRotatable: true,
            rotatePoints:function() {
                LayerHelper.rotatePoints(mslayer)
                log("rotate: " + this.name)
            },
            flipHorizontally:function() {
                var bezierPath = LayerHelper.getBezierPath(mslayer)
                var flipped = BezierPathHelper.flipShiftX(bezierPath)
                mslayer.setBezierPath(flipped)
                mslayer.isFlippedHorizontal = !mslayer.isFlippedHorizontal()
            },
            fillColor: function(hex) {
                LayerHelper.fillColor(mslayer, hex)
            },
            rect:[mslayer rect],
            layer : mslayer,
            refresh: function() {
                mslayer.handleDoubleClick()
                mslayer.deselectAllLayers()
            },
            quad: function() {
                var array = LayerHelper.dropCornerRadius(mslayer)
                this.refresh()
                var bezierPath = LayerHelper.getBoundsBezierPath(mslayer)
                var quad = BezierPathHelper.getQuad(bezierPath)
                coscript.setShouldKeepAround(true)
                var cosi = [coscript scheduleWithInterval:0.1 jsFunction:function(cinterval)
                {
                    LayerHelper.applyCornerRadius(mslayer, array)
                    refreshStyles()
                    coscript.setShouldKeepAround(false)
                }];
                
                return quad
            },
            insets: function(scale) {
                var tokens = this.tokens()
                var insets = (tokens[".inset"] || "0,0,0,0").split(",")
                insets = {
                    top: insets[0] * scale,
                    left: insets[1] * scale,
                    bottom: insets[2] * scale,
                    right: insets[3] * scale,
                }

                // var bezierPath = LayerHelper.getBezierPathInBounds(mslayer)
                // var quad = BezierPathHelper.getQuad(bezierPath)
                // var bounds1 = quad.bounds

                // var array = LayerHelper.dropCornerRadius(mslayer)
                // bezierPath = LayerHelper.getBoundsBezierPath(mslayer)
                // quad = BezierPathHelper.getQuad(bezierPath)
                // var bounds2 = quad.bounds

                // var insets = {
                //     left : Math.max(-bounds2.origin.x, bounds1.origin.x),
                //     top : 0,
                //     right: 0,
                //     bottom: 0,
                // }

                // LayerHelper.applyCornerRadius(mslayer, array)

                return insets
            }
        }
    } else {
        //var artboard = MagicMirror.artboard(mslayer.parentArtboard())
        return {
            matchingArtboard: function(lookup) {
                return null
            },
            name: mslayer.name(),
            pointsRotatable: false
        }
    }
}