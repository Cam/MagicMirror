
MagicMirror.layer = function(mslayer) {
    if (mslayer.className && mslayer.className().toString() == "MSShapeGroup") {
        var artboard = MagicMirror.artboard(mslayer.parentArtboard())
        var layerName = mslayer.name()
        var identifier = LayerHelper.getIdentifier(mslayer)
        var isSelected = mslayer.isSelected()
        var refreshStyles = function() {
            LayerHelper.refreshFill(mslayer)
        }
        return {
            type: "layer",
            artboard: artboard,
            name: layerName,
            identifier: identifier,
            children:function() {
                return map(mslayer.children(), function(layer) {
                    return MagicMirror.transform(layer)
                })
            },
            matchingArtboard:function(lookup) {
                var ab = lookup[this.identifier]
                if (ab && artboard.name != ab.name) {
                    return ab
                }
                return null
            },
            tokens: function() {
                return LayerHelper.getTokens(this.layer)
            },
            pointsRotatable: true,
            rotatePoints:function() {
                LayerHelper.rotatePoints(mslayer)
                log("rotate: " + this.name)
            },
            flipHorizontally:function() {
                LayerHelper.flipPoints(mslayer)
                log("flip: " + this.name)
            },
            fillColor: function(hex) {
                LayerHelper.fillColor(mslayer, hex)
            },
            rect:[mslayer rect],
            layer : mslayer,
            refresh: function() {
                if (isSelected) {
                    mslayer.handleDoubleClick()
                    mslayer.deselectAllLayers()
                }
            },
            selectIfNecessary: function() {
                if (isSelected) {
                    mslayer.setIsSelected(true)
                }
            },
            quad: function() {
                var array = LayerHelper.dropCornerRadius(mslayer)
                this.refresh()
                var bezierPath = LayerHelper.getBoundsBezierPath(mslayer)
                var quad = BezierPathHelper.getQuad(bezierPath)
                coscript.setShouldKeepAround(true)
                var cosi = [coscript scheduleWithInterval:0.1 jsFunction:function(cinterval)
                {
                    LayerHelper.applyCornerRadius(mslayer, array)
                    refreshStyles()
                    coscript.setShouldKeepAround(false)
                }];
                
                return quad
            },
            padding: function(scale) {
                var tokens = this.tokens()
                var padding = (tokens[".padding"] || "0,0,0,0").split(",")

                var size = this.rect.size
                var paddingOf = function(original, value, scale) {
                    if (getPercentage(value)) {
                        return original * getPercentage(value) * scale
                    } else if (getNumber(value)) {
                        return getNumber(value) * scale
                    } else {
                        return 0
                    }
                }
                padding = {
                    top: paddingOf(size.height, padding[0], scale),
                    left: paddingOf(size.width, padding[1], scale),
                    bottom: paddingOf(size.height, padding[2], scale),
                    right: paddingOf(size.width, padding[3], scale),
                }

                log("padding")
                log(padding)

                log("this.rect")
                log(this.rect.size.height)
                log(this.rect.size.width)

                // var bezierPath = LayerHelper.getBezierPathInBounds(mslayer)
                // var quad = BezierPathHelper.getQuad(bezierPath)
                // var bounds1 = quad.bounds

                // var array = LayerHelper.dropCornerRadius(mslayer)
                // bezierPath = LayerHelper.getBoundsBezierPath(mslayer)
                // quad = BezierPathHelper.getQuad(bezierPath)
                // var bounds2 = quad.bounds

                // var padding = {
                //     left : Math.max(-bounds2.origin.x, bounds1.origin.x),
                //     top : 0,
                //     right: 0,
                //     bottom: 0,
                // }

                // LayerHelper.applyCornerRadius(mslayer, array)

                return padding
            }
        }
    } else {
        //var artboard = MagicMirror.artboard(mslayer.parentArtboard())
        return {
            matchingArtboard: function(lookup) {
                return null
            },
            name: mslayer.name(),
            pointsRotatable: false
        }
    }
}